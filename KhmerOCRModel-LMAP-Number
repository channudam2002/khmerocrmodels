{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8600705,"sourceType":"datasetVersion","datasetId":5145541}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from IPython.display import clear_output\n# %pip install datasets==2.19.1\n# %pip install tensorflow==2.15.0\n# %pip install transformers==4.41.0\n%pip install rouge_score\n%pip install wandb\n%pip install jiwer\n%pip install khmer-nltk\nclear_output()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"-----START TO IMPORT THE LIBRARIES-----\")\nimport os\nimport cv2\nimport re\nimport torch\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport rouge_score\nimport datasets\nimport wandb\nimport string\nimport random\nfrom khmernltk import sentence_tokenize\n\nfrom sklearn.model_selection import train_test_split\nfrom torch.utils.data.dataset import Dataset as D\n\nfrom transformers import ViTFeatureExtractor, XLMRobertaTokenizer\nfrom transformers import VisionEncoderDecoderModel, XLMRobertaForCausalLM\nfrom transformers import VisionEncoderDecoderConfig\nfrom transformers import DataCollatorForLanguageModeling\nfrom transformers import Trainer, TrainingArguments\nfrom transformers import Seq2SeqTrainer, Seq2SeqTrainingArguments\nfrom transformers import default_data_collator\nfrom transformers import EarlyStoppingCallback\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nwandb.login(key=\"6781743360aedb81523b4e07a9c88a8c6fd4ef17\")\n\nprocessor_checkpoint = \"microsoft/trocr-base-handwritten\"\ntokenizer_checkpoint = \"channudam/khmer-xlm-roberta-base\"\n\nfeature_extractor = ViTFeatureExtractor.from_pretrained(processor_checkpoint)\ntokenizer = XLMRobertaTokenizer.from_pretrained(tokenizer_checkpoint)\n\ntranslator = str.maketrans('', '', string.punctuation)\n\ndef transform_image(image):\n    rand_int = random.randint(1, 2)\n    kanel_size = (rand_int, rand_int)\n    image = cv2.blur(image, kanel_size)\n    return image\nclear_output()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:00.234646Z","iopub.execute_input":"2024-06-05T01:27:00.235190Z","iopub.status.idle":"2024-06-05T01:27:01.943171Z","shell.execute_reply.started":"2024-06-05T01:27:00.235141Z","shell.execute_reply":"2024-06-05T01:27:01.942153Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"print(\"-----START TO CHECK IF GPU(S) ARE AVAILABLE-----\")\nif torch.cuda.is_available():       \n    device = torch.device(\"cuda\")\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:03.494147Z","iopub.execute_input":"2024-06-05T01:27:03.494932Z","iopub.status.idle":"2024-06-05T01:27:03.556376Z","shell.execute_reply.started":"2024-06-05T01:27:03.494895Z","shell.execute_reply":"2024-06-05T01:27:03.555354Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"-----START TO CHECK IF GPU(S) ARE AVAILABLE-----\nThere are 1 GPU(s) available.\nWe will use the GPU: Tesla P100-PCIE-16GB\n","output_type":"stream"}]},{"cell_type":"code","source":"# read image\nprint(\"-----START TO READ IMAGES-----\")\nimage_path = \"/kaggle/input/cambodia-por-cropped-image-data/cleaned_outputs_(new)/\"\nfiles = np.sort(os.listdir(image_path))\nlabels = pd.read_csv(\"/kaggle/input/cambodia-por-cropped-image-data/cleaned_outputs_(new)/labels.csv\")\nlabels.dropna(inplace=True)\nlabels.drop_duplicates(inplace=True)\nlabels = labels[labels.label.str.contains(\"1\") | \n            labels.label.str.contains(\"2\") |\n            labels.label.str.contains(\"3\") |\n            labels.label.str.contains(\"4\") |\n            labels.label.str.contains(\"5\") |\n            labels.label.str.contains(\"6\") |\n            labels.label.str.contains(\"7\") |\n            labels.label.str.contains(\"8\") |\n            labels.label.str.contains(\"9\")]\nimages = [plt.imread(f\"/kaggle/input/cambodia-por-cropped-image-data/cleaned_outputs_(new)/img_{idx}.png\") for idx in labels.index]\nimage_names = labels.label.tolist()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:04.536160Z","iopub.execute_input":"2024-06-05T01:27:04.536947Z","iopub.status.idle":"2024-06-05T01:27:23.005629Z","shell.execute_reply.started":"2024-06-05T01:27:04.536915Z","shell.execute_reply":"2024-06-05T01:27:23.004764Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"-----START TO READ IMAGES-----\n","output_type":"stream"}]},{"cell_type":"code","source":"print(image_names[10])\nplt.imshow(images[10])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:23.007768Z","iopub.execute_input":"2024-06-05T01:27:23.008193Z","iopub.status.idle":"2024-06-05T01:27:23.272456Z","shell.execute_reply.started":"2024-06-05T01:27:23.008153Z","shell.execute_reply":"2024-06-05T01:27:23.271338Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"424\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"new_images = images\nnew_image_names = image_names","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:23.273730Z","iopub.execute_input":"2024-06-05T01:27:23.274145Z","iopub.status.idle":"2024-06-05T01:27:23.278701Z","shell.execute_reply.started":"2024-06-05T01:27:23.274098Z","shell.execute_reply":"2024-06-05T01:27:23.277610Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"print(\"-----START TO CONVERT DATA TO PANDAS DATAFRAME-----\")\ndf = pd.DataFrame({\n    'label': new_image_names,\n    'image': [image.flatten() for image in new_images],\n    'shape': [image.shape for image in new_images]\n})\nprint(df.head(5))","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:23.281214Z","iopub.execute_input":"2024-06-05T01:27:23.281591Z","iopub.status.idle":"2024-06-05T01:27:23.670856Z","shell.execute_reply.started":"2024-06-05T01:27:23.281562Z","shell.execute_reply":"2024-06-05T01:27:23.669744Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"-----START TO CONVERT DATA TO PANDAS DATAFRAME-----\n           label                                              image  \\\n0  63002947-3321  [0.972549, 0.94509804, 0.8117647, 0.96862745, ...   \n1     0291-II 78  [0.9254902, 0.9254902, 0.8156863, 0.92941177, ...   \n2           1938  [0.9254902, 0.9254902, 0.827451, 0.92941177, 0...   \n3           7445  [0.972549, 0.9764706, 0.8509804, 0.93333334, 0...   \n4  22193781-6603  [0.972549, 0.94509804, 0.8117647, 0.96862745, ...   \n\n         shape  \n0  (22, 76, 3)  \n1  (22, 76, 3)  \n2  (22, 76, 3)  \n3  (22, 76, 3)  \n4  (22, 76, 3)  \n","output_type":"stream"}]},{"cell_type":"code","source":"print(df.label[1000])\nplt.imshow(df.image[1000].reshape(df['shape'][1000]))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:23.672518Z","iopub.execute_input":"2024-06-05T01:27:23.672922Z","iopub.status.idle":"2024-06-05T01:27:23.918148Z","shell.execute_reply.started":"2024-06-05T01:27:23.672882Z","shell.execute_reply":"2024-06-05T01:27:23.916995Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"9387\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAh8AAAC9CAYAAAATFh8dAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAkQ0lEQVR4nO3df3BU1f038Pdukt0ESDZEICGSICCCikQLkqbgTzJivn47ooxf9aEdqLaOmFgROwr9VtGnrUGZqsXGUK0FHKtYO6Jiv4IYJDy2gCVKAa0UMEosSaiOySaB7Ca75/nDh32IuZ8D93Bzd5N9v2Z2Rs7Zc++55969Oe6ez/14lFIKRERERC7xxrsDRERElFw4+SAiIiJXcfJBREREruLkg4iIiFzFyQcRERG5ipMPIiIichUnH0REROQqTj6IiIjIVZx8EBERkas4+SAiIiJXpfbVhquqqrB8+XI0NTWhqKgITz75JKZNm3bSdtFoFIcPH0ZmZiY8Hk9fdY+IiIgcpJRCW1sb8vPz4fWe5LsN1QfWrl2rfD6f+v3vf68+/PBD9aMf/UhlZ2er5ubmk7ZtaGhQAPjiiy+++OKLr374amhoOOnfeo9SzieWKy4uxsUXX4zf/OY3AL7+NqOgoAB33nknFi9erG3b2tqK7Oxs7N79NjIzB5/yPnXfkigVtSyPRLrFNikpKdblqfJ+pBrdAEej1n3TtUpNFfrmtS4HgO7uiM29nLzWSlS4nJR4nIA8coB0Wj0eeVZt0sboWKP220jXotG3fJomHl2lC/s56f/1CExuR1Ibp29t0vZ05048D7o2Qp3+ErF/9zEbH5O7nAn7129X2PoeB8jXo3Sf17XRsx4Hk3uFdi8uXfPytWg9Nm1t7Tj33CvQ0tKCQCCg3bbjP7uEw2HU1dVhyZIlsTKv14vS0lJs27at1/tDoRBCoVDs321tbQCAzMzByMwc0uv98h8W+WKV/sDrJh/iH3hOPrQ4+dDj5EOPkw9OPvT7kYVD8uQjJYWTDxN2Jx8na3cixxecfvHFF4hEIsjNze1Rnpubi6ampl7vr6ysRCAQiL0KCgqc7hIRERElkLhHuyxZsgStra2xV0NDQ7y7RERERH3I8Z9dhg0bhpSUFDQ3N/cob25uRl5eXq/3+/1++P1+p7tBRERECcrxyYfP58OUKVNQU1OD2bNnA/h6XUNNTQ0qKipOeTuhUCd8vt7d8/l8lu/XTWC6u63XdnR369YhWP8WqP1NTfidy+R3OO3vyMLvbR7Nb5QK8voWsY3Ybc3xOP3Tr7Q916KwdQsehM45voRboNuPo0s+dGOQuOHwup45eYpM7glOD5t0v3B2XYcp186EXON8XIXAZO2NsKXE/WjBI9z7pHIrffKcj0WLFmHevHmYOnUqpk2bhieeeAIdHR34wQ9+0Be7IyIion6kTyYfN954I/7973/jgQceQFNTEy688EJs2LCh1yJUIiIiSj599oTTiooKWz+zEBERUXKIe7QLERERJRdOPoiIiMhVffazy+kaMmSw5ePVpSeCdnWFLMsBIBKxfvKd7gl2Yp0u0ENctWz/aZzwyJE40tPyolE5osXjkZ/kZ58mSkgJq/u9msffR3WRPdbH6ktLl/sgjJ1uP9Ix6R5MmCLN3XXL1IW+hcPy9Stuyugpmfbb6CIFTJ53adIHHdOnqdoVidh/qmQ0IlxXXfLTOKXNRZX8+ZaubenJngCQnmH9GdLer8Qntsr3hEi3PD7SU6alezYgj7fuaaUS+QnTMpPrzaRvJhE6Xs19Vvq06vZjtw8ne/LpifjNBxEREbmKkw8iIiJyFScfRERE5CpOPoiIiMhVnHwQERGRqzj5ICIiIlclbKitx+OxDLuTwpycThxkEvLn7H40oVkGhyol1zPhfJImTSinMD4mx2PSbyfD0ACIIYkm15su4Vu8k1KZfn7kMdWEs9qPljTS3eVcgkivVxd6KYTNau4JJqHVUli8SfipjjZUWwjNTEmxf/2YhLM6Ha5ush9pvHXhxtL23PosSOdU1+dv4jcfRERE5CpOPoiIiMhVnHwQERGRqzj5ICIiIldx8kFERESuSthoF7t0q4nlREDyKmy3klVJnI4oMYkOcXpVt5NtdCvyzcZOShqmaWESPQPr1eD6lfomx+NWuIv9ZGvarQntTKKOHL9GlPU5cjoZnhwhY7+NjjQ+JmOtj2jR3ZuliBJnI1ck+s+3VC5fVybJGZ2MwutPUZ/85oOIiIhcxckHERERuYqTDyIiInIVJx9ERETkKk4+iIiIyFWcfBAREZGrHA+1ffDBB/HQQw/1KJswYQI+/vhjW9uJRCKWSWpMEk9JTUySCunEO2RK18QsSZLUxtn96OvEGrkTBuRrxNHdiIm09KHdTifyc47JuDkdyimFjDodautL8wk1uhBYscZ2G/3n28lrxNnrTT/W1mNncr+wk9TsOOeTZNrfj0lodTRq/++gCbv3czuPqOiT53ycf/75ePvtt///TlIHzONEiIiI6DT1yawgNTUVeXl5fbFpIiIi6uf6ZM3H/v37kZ+fj7Fjx2Lu3Lk4dOiQ+N5QKIRgMNjjRURERAOX45OP4uJirF69Ghs2bEB1dTXq6+txySWXoK2tzfL9lZWVCAQCsVdBQYHTXSIiIqIE4lF9vOKmpaUFo0ePxmOPPYZbb721V30oFEIoFIr9OxgMoqCgAIcObUdW1pBe73drwanJOpVEXnDa1RW2LB+IC06dPA9Ot4HHehGk87ld4ku38Kz/LjhNF2rcWXCqa2OSikpatKjLXSLnOzG7RqXr3iSPDRec6s+dCakPUp+DwXaceebFaG1tRVZWlnbbfb4SNDs7G+eccw4OHDhgWe/3++H3+3uVK6UsT5hbF0v/ZP8CdzoRnNOTDyfbJAQHz0NCfBZMQjMcJk5YHF/5bz8yw1m6SZuTfdBtKwGuOYHTnwcnt+d8wjdpP47uxvb+7XwU+vw5H+3t7Th48CBGjhzZ17siIiKifsDxycdPfvIT1NbW4tNPP8Vf//pXXHfddUhJScHNN9/s9K6IiIioH3L8Z5fPP/8cN998M7788ksMHz4cM2bMwPbt2zF8+HCnd0VERET9kOOTj7Vr1zq9SSIiIhpAmNuFiIiIXMXJBxEREbkqYZOuRKNRyzh9KWTJ6fBPidPPKHCyjY703BKnwwTdCjs0fY5E3NsIoYpm4caa/RiE3BmFAwptnH3agJ74LIKo5lkwBonY9M9iEfYjjY/mGSR2t2XKThKw45z+fDs5PibP+dBx615m8vcp3mH2TvxN5TcfRERE5CpOPoiIiMhVnHwQERGRqzj5ICIiIldx8kFERESuSthoF4lJBkC7mfkAZ1ej67Yl1TkdIZORkSHW2d2PCdPonXgnkHNrVblZ5JW21rgv9vrgXPSObns64sr7FGevHSejKdxKguZWFKCOSUZi3Vg7OXYm2XPdGlPd3w1pfEyuUScTe0rZdq3wmw8iIiJyFScfRERE5CpOPoiIiMhVnHwQERGRqzj5ICIiIldx8kFERESuSuBQW2UZUiWF+Ph8Ptt7CIe7xDqv17lwM10okxTq5XyiM6kP9sNcnQ4TdDoMzSTMVDok5xPv2Z/vS0eTCAkLnd6WSVi8SR+cvYZ1fXPuWtRtK97nziScVtfOpA8mif+cDpuVq+w/1sEkbNatZIFOnDd+80FERESu4uSDiIiIXMXJBxEREbmKkw8iIiJyFScfRERE5Crb0S5bt27F8uXLUVdXh8bGRqxbtw6zZ8+O1SulsHTpUjzzzDNoaWnB9OnTUV1djfHjx9vaT3p6OjIy0nuVe732VzR3dVlHtSglr8L2eOwHAsU7CZqO7ljd4PTY6FbQu3UejJJICVVd3XLkVeJeVc5zMvrBZD9a4olwNurI7rac3p5JdIpJIk5A/qyYRK6YRHqY0J8HsUZsI42dSSSO2RjI+5H+bsQl2qWjowNFRUWoqqqyrH/00UexYsUKrFy5Ejt27MDgwYMxa9YsdHZ22t0VERERDUC2//e+rKwMZWVllnVKKTzxxBP42c9+hmuvvRYA8NxzzyE3NxevvvoqbrrpptPrLREREfV7jn5PVV9fj6amJpSWlsbKAoEAiouLsW3bNss2oVAIwWCwx4uIiIgGLkcnH01NTQCA3NzcHuW5ubmxum+qrKxEIBCIvQoKCpzsEhERESWYuEe7LFmyBK2trbFXQ0NDvLtEREREfcjRyUdeXh4AoLm5uUd5c3NzrO6b/H4/srKyeryIiIho4HI0sdyYMWOQl5eHmpoaXHjhhQCAYDCIHTt2YMGCBba2lZ6ejvT0jF7l4XDY8v3t7e3itlJSrOdYgwYNFttI++mvTEPh4k2KNnM6nNatEE94hCRS3XISqRQhfE4XjugVrnkTJqGXOro23cI4mISK68bHJJRTuic4HRJpltDMuf3omCRg1J1vJ4/VJBFbIpDOUUqK/OdZDoHVfValcudCuO38nbE9+Whvb8eBAwdi/66vr8euXbuQk5ODwsJCLFy4EL/4xS8wfvx4jBkzBvfffz/y8/N7PAuEiIiIkpftycfOnTtxxRVXxP69aNEiAMC8efOwevVq3Hvvvejo6MBtt92GlpYWzJgxAxs2bEB6eu8HhhEREVHy8SjHv1c+PcFgEIFAAF99tRdZWZm96vmzi5n++pWk/O2rOz+7OE742aW7u1tswp9dEuNnl66wO0+iNPk5xMn96M+3VG52jfBnl4H1s0sw2I7Ro0vQ2tp60vWbcY92ISIiouTCyQcRERG5ipMPIiIicpWjobZukH6P1P1OKf2+m9hZaOXf2saPv9SyvKPjmNjm2DHrxH5///ubYpvc3BGW5RddZJ3bBwC++qrVsjwUColtvv/9OWLd448/YFl+9dXfF9v8/e//sCzXrau44IIJluVPP71MbFNa+r/EOrs6Oo6Kdc1H/mZdYT95rm4Rjbwto5BM0zU0TmaBtb9305BRk+05uS157YRjuz/J9hL3XtpfmZy7/vREBX7zQURERK7i5IOIiIhcxckHERERuYqTDyIiInIVJx9ERETkqoSNdjl69BhSU3tHqbS2WkdT+P1+cVtpaWmW5R0dHWKbeEfC/PnPm8W6226zjrK4557bxDYvvbTesvw//mO+2ObZZ5dblufnW2coBoA9e96yLJeeXAkAZ545Tay7/fa5luVHjnwhtjl82Do6RHdKc3ImW5aPGzdabPPJJ+9aluuiIiLRLsvyglHfEdtI0Vrap1dq6iQqaj/SxOknw5ocq8TpKB2TqDmTJ49KnH4qqhQhmAgPvTZJhOlWNJLTfxuk7WnvIxH7UZ8S3X6ka05+KuupPzmY33wQERGRqzj5ICIiIldx8kFERESu4uSDiIiIXMXJBxEREbmKkw8iIiJyVcKG2nq9KfB6e4ftZGRkWL5fF+IjJRQLh8Nim9TU+A5NOGwdkgkAw4YNtSyPRORw1v/6r/+0LF+48CGxzdSp1uGnGzc+J7Y5cOBTy/I9ez4W2wwebH1OASAQyLQslxLlAcC7775nWa47p3ZCxE5GF4q3bNlKy/KHHrpbbGPSNzmMUm6jlHUb3XUlhemlGIaFSudIF2YqHVJU02/dMUl8Pjmc3w0mIc+6NtI1YhZJapaQz8lwX6u/F6fD45HCTJ0OtbUuj0TkRJhRISzehO6zZTf0naG2RERElLA4+SAiIiJXcfJBREREruLkg4iIiFzFyQcRERG5ynZIx9atW7F8+XLU1dWhsbER69atw+zZs2P18+fPx5o1a3q0mTVrFjZs2GBrP9FoBNHoqa9I7+6Wo0OkxHKDBw8W2+iiTdwwceI4se6GGxZYlre0tIltPv74oGW5btW0SfKrV16xPs9SOQBceqmcWC4vb4Rl+dCh2WKbO+74mWW5LsKhoGCkZbnJGOi8tPYNy/I9e+XxkVb+m0ShmNBFp7iV8E3LpYRiJruXz4OzyfqcTQbnZrI1qZ3ueKzrdH8v5P7p+i1F4jh7zUunTndvlrZnkuTQhBSlZCexne1R7OjoQFFREaqqqsT3XH311WhsbIy9XnzxRbu7ISIiogHK9jcfZWVlKCsr077H7/cjL09Ou05ERETJq0/WfGzZsgUjRozAhAkTsGDBAnz55Zfie0OhEILBYI8XERERDVyOTz6uvvpqPPfcc6ipqcEjjzyC2tpalJWVib9PV1ZWIhAIxF4FBQVOd4mIiIgSiOPPEL/pppti/33BBRdg8uTJGDduHLZs2YKZM2f2ev+SJUuwaNGi2L+DwSAnIERERANYn4fajh07FsOGDcOBAwcs6/1+P7Kysnq8iIiIaODq8+xpn3/+Ob788kuMHGkdyihJ86Ugzdc7SU0kYt3lQYPSxW1JIUutrS1im/R0IdmZRxdXJ4QyGbQ5f9J4scmf/7zasryxsUlsU1IyxbL8tdfeEtvICZTk4/npTyssy++++xaxzdixl4h1H330T6GN/O3Ymud+ZVme4rUOuQaAceNmWJbrkkhJoWv/8z9bxDZnnJFtWZ6aaj8xolQOyKGXJknddMmipFBbXcidLixU+nm2q0sOfTcJO5RDhOU2ukSUiUrIjQYASPFan2+TkEynw6cjEV0osvW+dInYpHGQkscBgFc8Js39XPoToPn/fGkvKSm65IzWdbrzLRHySQIAIlHrMY1GrBt1dZ36Z8T25KO9vb3Htxj19fXYtWsXcnJykJOTg4ceeghz5sxBXl4eDh48iHvvvRdnn302Zs2aZXdXRERENADZnnzs3LkTV1xxRezfx9drzJs3D9XV1di9ezfWrFmDlpYW5Ofn46qrrsLPf/5z+P3xTUdNREREicH25OPyyy/Xfm26cePG0+oQERERDWzM7UJERESu4uSDiIiIXNXn0S6mvF6P5Yp0aQWwlDwOkJPEdWmS0WV4BllX6CJXxKXO9tu8/rochbJ3737L8p/+9x1im0/r/2VZPnZsodhm6/95z7J8w5vviG0efnixZXmGJhqpq0tepR4VlmJ3dBwV24iRI5rT0NkZEmo0q/iFqqeeek5s8uRv/rdlue6nTKnOpI0Jt5JVAc4eqy5KRzp5+gRgTiZvkzmeeM+F/ZuOm0mkkj7pnL0+eHQJ/oQ+KE0bsdfagEf7kWninxqDS0c7mkKlEu7LUrkVfvNBREREruLkg4iIiFzFyQcRERG5ipMPIiIichUnH0REROQqTj6IiIjIVQkbatvd1Y1ui2RSR4+1W78/IoVKAmlpPsvyjAz5ke+RqHUYrjb6SQiZkhMUAfBYhyZdXXaZ2GTx4kcsyx9//Hdim6ysIZbl+w9sEdtIIbD//dNHxTbDh19oWa4LG5v7vdli3bkTx1pXaIY0L/diuVJw6aXTLMujSg7H3vfhQcvyhobDYpvCwlzr/WgSsUljpwsvNwmXlJOtyaR+m4RXAnJyO5NQTilJHQDLewugDzuUPg9pafJ9JDXVeky1CQuF06A7P1JSNV3yQene061J0GYSCu2BLjGhdZ3u2pZIfxsAOfw+1Sefu7Q06zZGnxPN+IhJ2jTnziuFimuuK3Fbmmx0KWnCoy181o9OCGsem9Brv6f8TiIiIiIHcPJBREREruLkg4iIiFzFyQcRERG5ipMPIiIicpVHuZUt6RQFg0EEAgE0fP5XMULDSkZGhlgnrfhub5dXR6eny4nQnGQSLeBkG5OoCJNLRrcf3erxFCH6we+zjmACgC4hkiEUDsttNHUSaUW+FLGhq5P6DMhjpxs3kxX5Tl4LuigL7V4MEo1JfdBFEEWjQtSGpmv+NOt7Qnu7nORQioDTRdp5heSZumtESuhlEjVykjNkn5KvRSeT6CnI0U266CJxe8J1pT8P9ttIdIkRpfuI7t4j0Z0DKWJM+mwFg+04a/QlaG1tRVZWlna//OaDiIiIXMXJBxEREbmKkw8iIiJyFScfRERE5CpOPoiIiMhVnHwQERGRq2zF5VRWVuKVV17Bxx9/jIyMDHznO9/BI488ggkTJsTe09nZiXvuuQdr165FKBTCrFmz8NRTTyE31zqhliQajVqG80ihTMeOHRO3lZJifZiDBw8W22gTMtmkD4GVEjXJYYJS+JNuP1Iosu44pXAqbWisEB5mEs4FyAnAopo20jjogu2kkERdv6U6XYinFHIX1oT6SmOqC6tzMmxWdzzydaoJjdV3QlcrNLGf7EzqhW7UpOtUGzYrhHjqznfXMetrpLNTvscNyrC+l6Wny9eIHH6vCY2VRkg3cEqulO5/USV/vqVrxJvibIiweB9xOGmjyX4cDVE2eESDHIKrOW/fYOubj9raWpSXl2P79u3YtGkTurq6cNVVV6GjoyP2nrvvvhvr16/Hyy+/jNraWhw+fBjXX3+9nd0QERHRAGbrm48NGzb0+Pfq1asxYsQI1NXV4dJLL0VrayueffZZvPDCC7jyyisBAKtWrcK5556L7du349vf/navbYZCIYRCodi/g8GgyXEQERFRP3Faaz5aW1sBADk5OQCAuro6dHV1obS0NPaeiRMnorCwENu2bbPcRmVlJQKBQOxVUFBwOl0iIiKiBGc8+YhGo1i4cCGmT5+OSZMmAQCamprg8/mQnZ3d4725ubloamqy3M6SJUvQ2toaezU0NJh2iYiIiPoB+w+C/3/Ky8uxd+9evPvuu6fVAb/fD79fXrBFREREA4vR5KOiogJvvPEGtm7dilGjRsXK8/LyEA6H0dLS0uPbj+bmZuTl5dnaR0ZGhmWExtGj1kmc2traxG1JkxuTaBenVyDLTeRtSdEPulXLJ66rOZEu0kQ6Hl3CI0k0IkdM6CKVwmHrfnu9ch+kyBXdJFeq042p1LeuLjmCSLqu9IngpMRy8phK584kQZvuGpGkpcm3FpPEhLomHiFyxSS5nk57m3UiykAgILaRjjUclhONSeMtRbQAQFqa9fUb6pT34/NZt/Fq73HSmMonSGnjm6QkmfYjrMKd8udOijrS3cuk68ckysynSYQpcTIKxZR0PHJSzVNPZGjr06mUQkVFBdatW4fNmzdjzJgxPeqnTJmCtLQ01NTUxMr27duHQ4cOoaSkxM6uiIiIaICy9c1HeXk5XnjhBbz22mvIzMyMreMIBALIyMhAIBDArbfeikWLFiEnJwdZWVm48847UVJSYhnpQkRERMnH1uSjuroaAHD55Zf3KF+1ahXmz58PAHj88cfh9XoxZ86cHg8ZIyIiIgJsTj5O5bfa9PR0VFVVoaqqyrhTRERENHAxtwsRERG5yjjUtq8c/3alTVhZLkW76CMmrFd8RyLyNznS9hLheftina6NsOLcKNpFE2mSIqwEV0IOBwA4pslZ4WS0SyikW/lvvRpddx66pGiXbk2uGoNoF5PcLiY5dpyNdpFXvTsd7QIh+sH+XvQ62jstyz0e+VqUjrWjw/r+BgARITLM55PPd2qqdG3Lo+DzWbeRIkMAZ3MGAfK1FYnKkStStEskool2EfrtNYh2SYS/AVK0i8lny4R0nG1tHafcj4SbfBwPmR039rI494SIiIjsamtr04agA4BHuTVVOkXRaBSHDx9GZmYmPB4PgsEgCgoK0NDQgKysrHh3Ly44BhwDgGNwHMeBYwBwDIDEGwOlFNra2pCfn3/S5+wk3DcfXq+3x4PLjsvKykqIwY0njgHHAOAYHMdx4BgAHAMgscbgZN94HMcFp0REROQqTj6IiIjIVQk/+fD7/Vi6dGlSJ5/jGHAMAI7BcRwHjgHAMQD69xgk3IJTIiIiGtgS/psPIiIiGlg4+SAiIiJXcfJBREREruLkg4iIiFzFyQcRERG5KqEnH1VVVTjrrLOQnp6O4uJivPfee/HuUp/aunUrvvvd7yI/Px8ejwevvvpqj3qlFB544AGMHDkSGRkZKC0txf79++PT2T5QWVmJiy++GJmZmRgxYgRmz56Nffv29XhPZ2cnysvLccYZZ2DIkCGYM2cOmpub49TjvlFdXY3JkyfHnlpYUlKCN998M1afDGPwTcuWLYPH48HChQtjZQN9HB588EF4PJ4er4kTJ8bqB/rxH/evf/0L3/ve93DGGWcgIyMDF1xwAXbu3BmrH+j3RQA466yzel0LHo8H5eXlAPrntZCwk4+XXnoJixYtwtKlS/H++++jqKgIs2bNwpEjR+LdtT7T0dGBoqIiVFVVWdY/+uijWLFiBVauXIkdO3Zg8ODBmDVrFjo7rbNt9je1tbUoLy/H9u3bsWnTJnR1deGqq65CR0dH7D1333031q9fj5dffhm1tbU4fPgwrr/++jj22nmjRo3CsmXLUFdXh507d+LKK6/Etddeiw8//BBAcozBif72t7/ht7/9LSZPntyjPBnG4fzzz0djY2Ps9e6778bqkuH4v/rqK0yfPh1paWl488038dFHH+FXv/oVhg4dGnvPQL8vAl9/Bk68DjZt2gQAuOGGGwD002tBJahp06ap8vLy2L8jkYjKz89XlZWVceyVewCodevWxf4djUZVXl6eWr58eayspaVF+f1+9eKLL8ahh33vyJEjCoCqra1VSn19vGlpaerll1+Ovecf//iHAqC2bdsWr266YujQoep3v/td0o1BW1ubGj9+vNq0aZO67LLL1F133aWUSo5rYenSpaqoqMiyLhmOXyml7rvvPjVjxgyxPhnvi0opddddd6lx48apaDTab6+FhPzmIxwOo66uDqWlpbEyr9eL0tJSbNu2LY49i5/6+no0NTX1GJNAIIDi4uIBOyatra0AgJycHABAXV0durq6eozBxIkTUVhYOGDHIBKJYO3atejo6EBJSUnSjUF5eTmuueaaHscLJM+1sH//fuTn52Ps2LGYO3cuDh06BCB5jv/111/H1KlTccMNN2DEiBG46KKL8Mwzz8Tqk/G+GA6H8fzzz+OWW26Bx+Ppt9dCQk4+vvjiC0QiEeTm5vYoz83NRVNTU5x6FV/HjztZxiQajWLhwoWYPn06Jk2aBODrMfD5fMjOzu7x3oE4Bnv27MGQIUPg9/tx++23Y926dTjvvPOSagzWrl2L999/H5WVlb3qkmEciouLsXr1amzYsAHV1dWor6/HJZdcgra2tqQ4fgD45JNPUF1djfHjx2Pjxo1YsGABfvzjH2PNmjUAku++CACvvvoqWlpaMH/+fAD997OQGu8OEFkpLy/H3r17e/zGnUwmTJiAXbt2obW1FX/6058wb9481NbWxrtbrmloaMBdd92FTZs2IT09Pd7diYuysrLYf0+ePBnFxcUYPXo0/vjHPyIjIyOOPXNPNBrF1KlT8fDDDwMALrroIuzduxcrV67EvHnz4ty7+Hj22WdRVlaG/Pz8eHfltCTkNx/Dhg1DSkpKr9W6zc3NyMvLi1Ov4uv4cSfDmFRUVOCNN97AO++8g1GjRsXK8/LyEA6H0dLS0uP9A3EMfD4fzj77bEyZMgWVlZUoKirCr3/966QZg7q6Ohw5cgTf+ta3kJqaitTUVNTW1mLFihVITU1Fbm5uUozDibKzs3HOOefgwIEDSXMdjBw5Euedd16PsnPPPTf281My3RcB4LPPPsPbb7+NH/7wh7Gy/notJOTkw+fzYcqUKaipqYmVRaNR1NTUoKSkJI49i58xY8YgLy+vx5gEg0Hs2LFjwIyJUgoVFRVYt24dNm/ejDFjxvSonzJlCtLS0nqMwb59+3Do0KEBMwaSaDSKUCiUNGMwc+ZM7NmzB7t27Yq9pk6dirlz58b+OxnG4UTt7e04ePAgRo4cmTTXwfTp03uF2//zn//E6NGjASTHffFEq1atwogRI3DNNdfEyvrttRDvFa+StWvXKr/fr1avXq0++ugjddttt6ns7GzV1NQU7671mba2NvXBBx+oDz74QAFQjz32mPrggw/UZ599ppRSatmyZSo7O1u99tpravfu3eraa69VY8aMUceOHYtzz52xYMECFQgE1JYtW1RjY2PsdfTo0dh7br/9dlVYWKg2b96sdu7cqUpKSlRJSUkce+28xYsXq9raWlVfX692796tFi9erDwej3rrrbeUUskxBlZOjHZRauCPwz333KO2bNmi6uvr1V/+8hdVWlqqhg0bpo4cOaKUGvjHr5RS7733nkpNTVW//OUv1f79+9Uf/vAHNWjQIPX888/H3jPQ74vHRSIRVVhYqO67775edf3xWkjYyYdSSj355JOqsLBQ+Xw+NW3aNLV9+/Z4d6lPvfPOOwpAr9e8efOUUl+Hld1///0qNzdX+f1+NXPmTLVv3774dtpBVscOQK1atSr2nmPHjqk77rhDDR06VA0aNEhdd911qrGxMX6d7gO33HKLGj16tPL5fGr48OFq5syZsYmHUskxBla+OfkY6ONw4403qpEjRyqfz6fOPPNMdeONN6oDBw7E6gf68R+3fv16NWnSJOX3+9XEiRPV008/3aN+oN8Xj9u4caMCYHls/fFa8CilVFy+ciEiIqKklJBrPoiIiGjg4uSDiIiIXMXJBxEREbmKkw8iIiJyFScfRERE5CpOPoiIiMhVnHwQERGRqzj5ICIiIldx8kFERESu4uSDiIiIXMXJBxEREbnq/wLoxAPNjVoygwAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"print(\"-----START TO SPLIT THE DATASET TO TRAIN TEST-----\")\nX_train, X_test, y_train, y_test = train_test_split(\n    df[['image', 'shape']], \n    df['label'], \n    test_size=0.2, \n    random_state=42)\ntrain_df = pd.DataFrame({\n    'shape': X_train['shape'],\n    'image': X_train['image'],\n    'label': y_train,\n}).reset_index().drop(\"index\", axis=1)\ntest_df = pd.DataFrame({\n    'shape': X_test['shape'],\n    'image': X_test['image'],\n    'label': y_test\n}).reset_index().drop(\"index\", axis=1)\nprint(f\"train_df shape: {train_df.shape}\")\nprint(f\"test_df shape: {test_df.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:23.919296Z","iopub.execute_input":"2024-06-05T01:27:23.919587Z","iopub.status.idle":"2024-06-05T01:27:23.943470Z","shell.execute_reply.started":"2024-06-05T01:27:23.919561Z","shell.execute_reply":"2024-06-05T01:27:23.942464Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"-----START TO SPLIT THE DATASET TO TRAIN TEST-----\ntrain_df shape: (17207, 3)\ntest_df shape: (4302, 3)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"-----START TO INITIALIZE THE MODEL-----\")\n# set encoder decoder tying to True\nconfig_encoder = VisionEncoderDecoderConfig.from_pretrained(processor_checkpoint, force_download=True).encoder\nconfig_decoder = XLMRobertaForCausalLM.from_pretrained(tokenizer_checkpoint, is_decoder=True, force_download=True).config\nconfig = VisionEncoderDecoderConfig.from_encoder_decoder_configs(config_encoder, config_decoder, tie_encoder_decoder=True)\nmodel = VisionEncoderDecoderModel(config)\nmodel.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:23.944789Z","iopub.execute_input":"2024-06-05T01:27:23.945139Z","iopub.status.idle":"2024-06-05T01:27:45.806676Z","shell.execute_reply.started":"2024-06-05T01:27:23.945087Z","shell.execute_reply":"2024-06-05T01:27:45.805591Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"-----START TO INITIALIZE THE MODEL-----\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/4.17k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2ace5150c8c740af9a580155c3b4f14c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/708 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2eebf1ab544c470784abc00d4249ce76"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/708 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"33c5e899a59c4f7b8b529c177fc062a1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/1.11G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d637c6f6778740908e925fcc216d768f"}},"metadata":{}},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"VisionEncoderDecoderModel(\n  (encoder): ViTModel(\n    (embeddings): ViTEmbeddings(\n      (patch_embeddings): ViTPatchEmbeddings(\n        (projection): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))\n      )\n      (dropout): Dropout(p=0.0, inplace=False)\n    )\n    (encoder): ViTEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x ViTLayer(\n          (attention): ViTAttention(\n            (attention): ViTSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=False)\n              (key): Linear(in_features=768, out_features=768, bias=False)\n              (value): Linear(in_features=768, out_features=768, bias=False)\n              (dropout): Dropout(p=0.0, inplace=False)\n            )\n            (output): ViTSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.0, inplace=False)\n            )\n          )\n          (intermediate): ViTIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): ViTOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (dropout): Dropout(p=0.0, inplace=False)\n          )\n          (layernorm_before): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n          (layernorm_after): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n        )\n      )\n    )\n    (layernorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n    (pooler): ViTPooler(\n      (dense): Linear(in_features=768, out_features=768, bias=True)\n      (activation): Tanh()\n    )\n  )\n  (decoder): XLMRobertaForCausalLM(\n    (roberta): XLMRobertaModel(\n      (embeddings): XLMRobertaEmbeddings(\n        (word_embeddings): Embedding(250002, 768, padding_idx=1)\n        (position_embeddings): Embedding(514, 768, padding_idx=1)\n        (token_type_embeddings): Embedding(1, 768)\n        (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n        (dropout): Dropout(p=0.1, inplace=False)\n      )\n      (encoder): XLMRobertaEncoder(\n        (layer): ModuleList(\n          (0-11): 12 x XLMRobertaLayer(\n            (attention): XLMRobertaAttention(\n              (self): XLMRobertaSelfAttention(\n                (query): Linear(in_features=768, out_features=768, bias=True)\n                (key): Linear(in_features=768, out_features=768, bias=True)\n                (value): Linear(in_features=768, out_features=768, bias=True)\n                (dropout): Dropout(p=0.1, inplace=False)\n              )\n              (output): XLMRobertaSelfOutput(\n                (dense): Linear(in_features=768, out_features=768, bias=True)\n                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n                (dropout): Dropout(p=0.1, inplace=False)\n              )\n            )\n            (crossattention): XLMRobertaAttention(\n              (self): XLMRobertaSelfAttention(\n                (query): Linear(in_features=768, out_features=768, bias=True)\n                (key): Linear(in_features=768, out_features=768, bias=True)\n                (value): Linear(in_features=768, out_features=768, bias=True)\n                (dropout): Dropout(p=0.1, inplace=False)\n              )\n              (output): XLMRobertaSelfOutput(\n                (dense): Linear(in_features=768, out_features=768, bias=True)\n                (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n                (dropout): Dropout(p=0.1, inplace=False)\n              )\n            )\n            (intermediate): XLMRobertaIntermediate(\n              (dense): Linear(in_features=768, out_features=3072, bias=True)\n              (intermediate_act_fn): GELUActivation()\n            )\n            (output): XLMRobertaOutput(\n              (dense): Linear(in_features=3072, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n        )\n      )\n    )\n    (lm_head): XLMRobertaLMHead(\n      (dense): Linear(in_features=768, out_features=768, bias=True)\n      (layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n      (decoder): Linear(in_features=768, out_features=250002, bias=True)\n    )\n  )\n)"},"metadata":{}}]},{"cell_type":"code","source":"print(\"-----START TO CONFIG THE MODEL-----\")\nmodel.config.decoder_start_token_id = tokenizer.cls_token_id\nmodel.config.pad_token_id = tokenizer.pad_token_id\nmodel.config.vocab_size = model.config.decoder.vocab_size\n\n# set beam search parameters\nmodel.config.eos_token_id = tokenizer.sep_token_id\nmodel.config.max_length = 15\nmodel.config.early_stopping = True\nmodel.config.no_repeat_ngram_size = 3\nmodel.config.length_penalty = 2.0\nmodel.config.num_beams = 4","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:45.808160Z","iopub.execute_input":"2024-06-05T01:27:45.808589Z","iopub.status.idle":"2024-06-05T01:27:45.817000Z","shell.execute_reply.started":"2024-06-05T01:27:45.808552Z","shell.execute_reply":"2024-06-05T01:27:45.815802Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"-----START TO CONFIG THE MODEL-----\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"-----START TO CONVERT DATAFRAME TO PYTHOCH TENSOR-----\")\nmax_length = 15\nclass KhmerTextImageDataset(D):\n    def __init__(self, df, tokenizer, feature_extractor, decoder_max_length=max_length):\n        self.df = df\n        self.tokenizer = tokenizer\n        self.feature_extractor = feature_extractor\n        self.decoder_max_length = decoder_max_length\n    def __len__(self):\n        return len(self.df)\n    def __getitem__(self, idx):\n        label = self.df['label'][idx]\n        image = self.df['image'][idx].reshape(self.df['shape'][idx])\n        pixel_values = self.feature_extractor(image, do_rescale=False, return_tensors=\"pt\").pixel_values\n        labels = self.tokenizer(label, \n                                truncation = True,\n                                padding=\"max_length\", \n                                max_length=self.decoder_max_length).input_ids\n        # important: make sure that PAD tokens are ignored by the loss function\n        labels = [label if label != self.tokenizer.pad_token_id else -100 for label in labels]\n        encoding = {\"pixel_values\": pixel_values.squeeze(), \"labels\": torch.tensor(labels)}\n        return encoding\ntrain_dataset = KhmerTextImageDataset(train_df,\n                                      tokenizer=tokenizer,\n                                      feature_extractor= feature_extractor)\neval_dataset = KhmerTextImageDataset(test_df,\n                                     tokenizer=tokenizer,\n                                     feature_extractor= feature_extractor)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:45.818462Z","iopub.execute_input":"2024-06-05T01:27:45.818847Z","iopub.status.idle":"2024-06-05T01:27:45.831015Z","shell.execute_reply.started":"2024-06-05T01:27:45.818810Z","shell.execute_reply":"2024-06-05T01:27:45.830049Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"-----START TO CONVERT DATAFRAME TO PYTHOCH TENSOR-----\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"-----START TO INITIALIZE COMPUT METRIC-----\")\nrouge = datasets.load_metric(\"rouge\", trust_remote_code=True)\ncer_metric = datasets.load_metric(\"cer\", trust_remote_code=True)\ndef compute_metrics(pred):\n    labels_ids = pred.label_ids\n    pred_ids = pred.predictions\n\n    # all unnecessary tokens are removed\n    pred_str = tokenizer.batch_decode(pred_ids, skip_special_tokens=True)\n    labels_ids[labels_ids == -100] = tokenizer.pad_token_id\n    label_str = tokenizer.batch_decode(labels_ids, skip_special_tokens=True)\n    rouge_output = rouge.compute(predictions=pred_str, references=label_str, rouge_types=[\"rouge2\"])[\"rouge2\"].mid\n    cer = cer_metric.compute(predictions=pred_str, references=label_str)\n    return {\n        \"cer\": cer,\n        \"rouge2_precision\": round(rouge_output.precision, 4),\n        \"rouge2_recall\": round(rouge_output.recall, 4),\n        \"rouge2_fmeasure\": round(rouge_output.fmeasure, 4)\n    }\nclear_output()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:45.834364Z","iopub.execute_input":"2024-06-05T01:27:45.834654Z","iopub.status.idle":"2024-06-05T01:27:46.369079Z","shell.execute_reply.started":"2024-06-05T01:27:45.834631Z","shell.execute_reply":"2024-06-05T01:27:46.367782Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"print(\"-----START TO SET UP MODEL FINE-TUNNING-----\")\n\nKhmerOCRModel = \"/kaggle/working/KhmerOCRModelLMAPNumber\"\nbatch_size = 8\ntraining_epochs = 20\n\nif not os.path.exists(KhmerOCRModel):\n    os.makedirs(KhmerOCRModel)\n\ntraining_args = Seq2SeqTrainingArguments(\n    output_dir=KhmerOCRModel,\n    learning_rate=5e-5,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    predict_with_generate=True,\n    fp16=True,\n    eval_strategy=\"epoch\",\n    do_train=True,\n    do_eval=True,\n    logging_steps=1024,  \n    save_steps=2048, \n    warmup_steps=1024,  \n    num_train_epochs = training_epochs,\n    overwrite_output_dir=True,\n    save_total_limit=1,\n)\n\ntrainer = Seq2SeqTrainer(\n    tokenizer=feature_extractor,\n    model=model,\n    args=training_args,\n    compute_metrics=compute_metrics,\n    train_dataset=train_dataset,\n    eval_dataset=eval_dataset,\n    data_collator=default_data_collator,\n)\n\nprint(\"-----START TO FINE-TUNNING-----\")\n# Fine-tune the model, training and evaluating on the train dataset trainer.train()\ntrainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T01:27:46.370267Z","iopub.execute_input":"2024-06-05T01:27:46.370579Z","iopub.status.idle":"2024-06-05T03:20:34.026752Z","shell.execute_reply.started":"2024-06-05T01:27:46.370550Z","shell.execute_reply":"2024-06-05T03:20:34.025176Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"-----START TO SET UP MODEL FINE-TUNNING-----\n-----START TO FINE-TUNNING-----\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.17.0"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240605_012746-1ee80n2z</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/rayranger/huggingface/runs/1ee80n2z' target=\"_blank\">/kaggle/working/KhmerOCRModelForNum</a></strong> to <a href='https://wandb.ai/rayranger/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/rayranger/huggingface' target=\"_blank\">https://wandb.ai/rayranger/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/rayranger/huggingface/runs/1ee80n2z' target=\"_blank\">https://wandb.ai/rayranger/huggingface/runs/1ee80n2z</a>"},"metadata":{}},{"name":"stderr","text":"We strongly recommend passing in an `attention_mask` since your input_ids may be padded. See https://huggingface.co/docs/transformers/troubleshooting#incorrect-output-when-padding-tokens-arent-masked.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='4698' max='43020' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [ 4698/43020 1:52:26 < 15:17:38, 0.70 it/s, Epoch 2.18/20]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Cer</th>\n      <th>Rouge2 Precision</th>\n      <th>Rouge2 Recall</th>\n      <th>Rouge2 Fmeasure</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>3.336200</td>\n      <td>3.205924</td>\n      <td>0.763820</td>\n      <td>0.000100</td>\n      <td>0.000100</td>\n      <td>0.000100</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>3.072900</td>\n      <td>3.070285</td>\n      <td>0.762515</td>\n      <td>0.000100</td>\n      <td>0.000100</td>\n      <td>0.000100</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"Some non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 128, 'early_stopping': True, 'num_beams': 4, 'length_penalty': 2.0, 'no_repeat_ngram_size': 3}\nYour generation config was originally created from the model config, but the model config has changed since then. Unless you pass the `generation_config` argument to this model's `generate` calls, they will revert to the legacy behavior where the base `generate` parameterization is loaded from the model config instead. To avoid this behavior and this warning, we recommend you to overwrite the generation config model attribute before calling the model's `save_pretrained`, preferably also removing any generation kwargs from the model config. This warning will be raised to an exception in v4.41.\n/opt/conda/lib/python3.10/site-packages/transformers/generation/utils.py:1283: UserWarning: You have modified the pretrained model configuration to control generation. This is a deprecated strategy to control generation and will be removed soon, in a future version. Please use and modify the model generation configuration (see https://huggingface.co/docs/transformers/generation_strategies#default-text-generation-configuration )\n  warnings.warn(\nSome non-default generation parameters are set in the model config. These should go into a GenerationConfig file (https://huggingface.co/docs/transformers/generation_strategies#save-a-custom-decoding-strategy-with-your-model) instead. This warning will be raised to an exception in v4.41.\nNon-default generation parameters: {'max_length': 128, 'early_stopping': True, 'num_beams': 4, 'length_penalty': 2.0, 'no_repeat_ngram_size': 3}\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[14], line 40\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m-----START TO FINE-TUNNING-----\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     39\u001b[0m \u001b[38;5;66;03m# Fine-tune the model, training and evaluating on the train dataset trainer.train()\u001b[39;00m\n\u001b[0;32m---> 40\u001b[0m \u001b[43mtrainer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:1885\u001b[0m, in \u001b[0;36mTrainer.train\u001b[0;34m(self, resume_from_checkpoint, trial, ignore_keys_for_eval, **kwargs)\u001b[0m\n\u001b[1;32m   1883\u001b[0m         hf_hub_utils\u001b[38;5;241m.\u001b[39menable_progress_bars()\n\u001b[1;32m   1884\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1885\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43minner_training_loop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1886\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1887\u001b[0m \u001b[43m        \u001b[49m\u001b[43mresume_from_checkpoint\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mresume_from_checkpoint\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1888\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrial\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrial\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1889\u001b[0m \u001b[43m        \u001b[49m\u001b[43mignore_keys_for_eval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mignore_keys_for_eval\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1890\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/transformers/trainer.py:2221\u001b[0m, in \u001b[0;36mTrainer._inner_training_loop\u001b[0;34m(self, batch_size, args, resume_from_checkpoint, trial, ignore_keys_for_eval)\u001b[0m\n\u001b[1;32m   2215\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maccelerator\u001b[38;5;241m.\u001b[39maccumulate(model):\n\u001b[1;32m   2216\u001b[0m     tr_loss_step \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtraining_step(model, inputs)\n\u001b[1;32m   2218\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   2219\u001b[0m     args\u001b[38;5;241m.\u001b[39mlogging_nan_inf_filter\n\u001b[1;32m   2220\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_torch_xla_available()\n\u001b[0;32m-> 2221\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m (torch\u001b[38;5;241m.\u001b[39misnan(tr_loss_step) \u001b[38;5;129;01mor\u001b[39;00m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43misinf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtr_loss_step\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m   2222\u001b[0m ):\n\u001b[1;32m   2223\u001b[0m     \u001b[38;5;66;03m# if loss is nan or inf simply add the average of previous logged losses\u001b[39;00m\n\u001b[1;32m   2224\u001b[0m     tr_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m tr_loss \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m+\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate\u001b[38;5;241m.\u001b[39mglobal_step \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_globalstep_last_logged)\n\u001b[1;32m   2225\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}